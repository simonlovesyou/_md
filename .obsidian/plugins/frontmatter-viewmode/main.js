/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ViewmodeFrontmatterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ViewmodeFrontmatterPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.livePreviewConfig = true;
  }
  async refreshEditConfig() {
    var _a;
    const prev = this.livePreviewConfig;
    this.livePreviewConfig = (_a = JSON.parse(await this.app.vault.adapter.read(`${this.app.vault.configDir}/app.json`)).livePreview) != null ? _a : true;
    return prev !== this.livePreviewConfig;
  }
  async setViewMode(view, viewmode) {
    let state = view.getState();
    switch (viewmode) {
      case "read" /* Reading */:
        state.mode = "preview";
        break;
      case "edit" /* Editing */:
        this.refreshEditConfig().then(
          async (changed) => changed && await this.setViewMode(view, this.livePreviewConfig ? "edit-preview" /* Preview */ : "edit-source" /* Source */)
        );
      case "edit-source" /* Source */:
      case "edit-preview" /* Preview */:
        state.mode = "source";
        state.source = viewmode === "edit-source" /* Source */ || viewmode === "edit" /* Editing */ && !this.livePreviewConfig;
        break;
      default:
        return;
    }
    if (viewmode === "read" /* Reading */) {
      state.mode = "preview";
    }
    await view.setState(state, { history: false });
  }
  async onload() {
    await this.refreshEditConfig();
    this.registerEvent(this.app.workspace.on("file-open", async (file) => {
      if (!file)
        return;
      const fileCache = this.app.metadataCache.getFileCache(file);
      if (!fileCache || !fileCache.frontmatter)
        return;
      const { "prefer-view": viewmode } = fileCache.frontmatter;
      if (!viewmode)
        return;
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view)
        return;
      await this.setViewMode(view, viewmode);
    }));
  }
  onunload() {
  }
};
